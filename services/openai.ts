import OpenAI from 'openai';
import * as FileSystem from 'expo-file-system';
import { NutritionData, AnalysisResult } from '../types/nutrition';

// Verificar se a chave da API est√° dispon√≠vel
const apiKey = process.env.EXPO_PUBLIC_OPENAI_API_KEY;

const openai = apiKey ? new OpenAI({
  apiKey: apiKey,
}) : null;

export async function analyzeFood(imageUri: string): Promise<AnalysisResult> {
  try {
    console.log('=== INICIANDO AN√ÅLISE DE ALIMENTO ===');
    console.log('URI da imagem:', imageUri);
    
    if (!apiKey) {
      console.error('‚ùå Chave da API OpenAI n√£o configurada');
      return {
        success: false,
        error: 'Chave da API OpenAI n√£o configurada. Configure EXPO_PUBLIC_OPENAI_API_KEY no arquivo .env',
      };
    }

    if (!openai) {
      console.error('‚ùå Cliente OpenAI n√£o inicializado');
      return {
        success: false,
        error: 'Cliente OpenAI n√£o inicializado',
      };
    }

    console.log('‚úÖ Chave da API configurada, lendo arquivo da imagem...');
    
    // Verificar se o arquivo existe
    const fileInfo = await FileSystem.getInfoAsync(imageUri);
    if (!fileInfo.exists) {
      console.error('‚ùå Arquivo de imagem n√£o encontrado:', imageUri);
      return {
        success: false,
        error: 'Arquivo de imagem n√£o encontrado',
      };
    }

    console.log('‚úÖ Arquivo encontrado, tamanho:', fileInfo.size, 'bytes');
    
    // Converter imagem para base64
    const base64Image = await FileSystem.readAsStringAsync(imageUri, {
      encoding: FileSystem.EncodingType.Base64,
    });

    console.log('‚úÖ Imagem convertida para base64, tamanho:', base64Image.length, 'caracteres');

    console.log('üîÑ Enviando para OpenAI...');
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `Analise esta imagem de alimento e retorne APENAS um JSON v√°lido com as seguintes informa√ß√µes nutricionais:

{
  "foodName": "nome do alimento identificado",
  "calories": n√∫mero_de_calorias_estimadas,
  "macros": {
    "protein": gramas_de_prote√≠na,
    "carbs": gramas_de_carboidratos,
    "fat": gramas_de_gordura
  },
  "sugar": gramas_de_a√ß√∫car,
  "vitamins": ["lista", "das", "principais", "vitaminas"],
  "confidence": porcentagem_de_confian√ßa_na_an√°lise
}

Seja preciso nas estimativas baseando-se no tamanho aparente da por√ß√£o. Retorne APENAS o JSON, sem texto adicional.`
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${base64Image}`,
                detail: "high"
              }
            }
          ]
        }
      ],
      max_tokens: 500,
      temperature: 0.1,
    });

    console.log('‚úÖ Resposta recebida da OpenAI');
    const content = response.choices[0]?.message?.content;
    if (!content) {
      console.error('‚ùå Resposta vazia da OpenAI');
      throw new Error('Resposta vazia da OpenAI');
    }

    console.log('üìÑ Conte√∫do da resposta:', content);

    // Limpar e processar a resposta
    let cleanedContent = content.trim();
    
    // Remover poss√≠veis caracteres especiais no in√≠cio e fim
    cleanedContent = cleanedContent.replace(/^[`'"]+|[`'"]+$/g, '');
    
    // Tentar encontrar JSON v√°lido na resposta
    let jsonMatch = cleanedContent.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.error('‚ùå N√£o foi poss√≠vel encontrar JSON v√°lido na resposta:', cleanedContent);
      throw new Error('Resposta n√£o cont√©m JSON v√°lido');
    }
    
    let jsonString = jsonMatch[0];
    
    try {
      // Parse do JSON retornado
      const nutritionData: NutritionData = JSON.parse(jsonString);
      
      // Valida√ß√£o b√°sica dos dados
      if (!nutritionData.foodName || typeof nutritionData.calories !== 'number') {
        console.error('‚ùå Dados inv√°lidos retornados pela IA:', nutritionData);
        throw new Error('Dados inv√°lidos retornados pela IA');
      }

      console.log('‚úÖ An√°lise conclu√≠da com sucesso:', nutritionData);

      return {
        success: true,
        data: nutritionData,
      };
    } catch (parseError) {
      console.error('‚ùå Erro ao fazer parse do JSON:', parseError);
      console.error('‚ùå JSON tentado:', jsonString);
      throw new Error(`Erro ao processar resposta da IA: ${parseError instanceof Error ? parseError.message : 'Erro desconhecido'}`);
    }

  } catch (error) {
    console.error('‚ùå Erro na an√°lise OpenAI:', error);
    
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Erro desconhecido na an√°lise',
    };
  }
}